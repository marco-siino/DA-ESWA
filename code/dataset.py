# -*- coding: utf-8 -*-
"""dataset.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zTSaFw4Ry01XBXRY12ya7wiHHSRYMVb0
"""

import tensorflow as tf
import os

class Dataset:

    def __init__(self, ds_name, language):
        # Values for ds_name are: "fns", "hss", "iss"
        # Values for language are: "it", "de", "it_de", "ja", "tr", "mix"
        self.language = language
        self.ds_name = ds_name

        self.url_train_set = "https://github.com/marco-siino/DA-ESWA/raw/main/data/"+ds_name+"/"+ds_name+"-train-"+language+".zip"
        self.url_test_set = "https://github.com/marco-siino/DA-ESWA/raw/main/data/"+ds_name+"/"+ds_name+"-test-"+language+".zip"
        
    def fetch_ds_files(self):
        self.train_set_archive = tf.keras.utils.get_file(self.ds_name+'-train-'+self.language+'.zip', self.url_train_set,
                                    extract=True, archive_format='zip',cache_dir='.',
                                    cache_subdir='')    
        self.test_set_archive  = tf.keras.utils.get_file(self.ds_name+'-test-'+self.language+'.zip', self.url_test_set,
                                    extract=True, archive_format='zip',cache_dir='.',
                                    cache_subdir='')

    def organize_ds_folders(self):
        ds_name = self.ds_name

        if ds_name == 'fns':
          self.train_folder_name = "pan20-author-profiling-training-2020-02-23-"+self.language
          self.test_folder_name = "pan20-author-profiling-test-2020-02-23-"+self.language
        elif ds_name == 'hss':
          self.train_folder_name = "pan20-author-profiling-training-2020-02-23-"+self.language
          self.test_folder_name = "pan20-author-profiling-test-2020-02-23-"+self.language
        elif ds_name == 'iss':
          self.train_folder_name = "pan20-author-profiling-training-2020-02-23-"+self.language
          self.test_folder_name = "pan20-author-profiling-test-2020-02-23-"+self.language
        else: 
          print("\nNo ds_name found!")        

        os.rename(self.train_folder_name, self.ds_name+"-train-"+self.language)
        os.rename(self.test_folder_name, self.ds_name+"-test-"+self.language) 

        self.source_train_dir = os.path.join(os.path.dirname(self.train_set_archive), self.ds_name+"-train-"+self.language)
        self.source_test_dir = os.path.join(os.path.dirname(self.test_set_archive), self.ds_name+"-test-"+self.language)

        ### Training Folders. ###
        # First level directory.
        if not os.path.exists('train_dir_'+self.ds_name+'_'+self.language):
            os.makedirs('train_dir_'+self.ds_name+'_'+self.language)

        # Class labels directory.
        if not os.path.exists('train_dir_'+self.ds_name+'_'+self.language+'/0'):
            os.makedirs('train_dir_'+self.ds_name+'_'+self.language+'/0')
        if not os.path.exists('train_dir_'+self.ds_name+'_'+self.language+'/1'):
            os.makedirs('train_dir_'+self.ds_name+'_'+self.language+'/1')

        # Make Py variables.
        self.train_dir = 'train_dir_'+self.ds_name+'_'+self.language

        ## Test Folders. ##
        # First level directory.
        if not os.path.exists('test_dir_'+self.ds_name+'_'+self.language):
            os.makedirs('test_dir_'+self.ds_name+'_'+self.language)

        # Class labels directory.
        if not os.path.exists('test_dir_'+self.ds_name+'_'+self.language+'/0'):
            os.makedirs('test_dir_'+self.ds_name+'_'+self.language+'/0')
        if not os.path.exists('test_dir_'+self.ds_name+'_'+self.language+'/1'):
            os.makedirs('test_dir_'+self.ds_name+'_'+self.language+'/1')

        # Make Py variables.
        self.test_dir = 'test_dir_'+self.ds_name+'_'+self.language

    def organize_ds_samples(self):

      train_truth_file_path = self.source_train_dir+'/truth.txt'
      test_truth_file_path = self.source_test_dir+'/truth.txt' 

      # Open the file truth.txt with read only permit.
      f = open(train_truth_file_path, "r")
      # use readline() to read the first line 
      line = f.readline()
      # use the read line to read further.
      # If the file is not empty keep reading one line
      # at a time, till the file is empty
      while line:
          # Split line at :::
          x = line.split(":::")
          fNameXml = x[0]+'.xml'
          fNameTxt = x[0]+'.txt'
          # Second coord [0] gets just the first character (label) and not /n too.
          label = x[1][0]

          # Now move the file to the right folder.
          if os.path.exists(self.source_train_dir+'/en/'+fNameXml):
            os.rename(self.source_train_dir+'/en/'+fNameXml, self.train_dir+'/'+label+'/'+fNameTxt )

          # use readline() to read next line
          line = f.readline()

      # Open the file truth.txt with read only permit.
      f = open(test_truth_file_path, "r")
      # use readline() to read the first line 
      line = f.readline()
      # use the read line to read further.
      # If the file is not empty keep reading one line
      # at a time, till the file is empty
      while line:
          # Split line at :::
          x = line.split(":::")
          fNameXml = x[0]+'.xml'
          fNameTxt = x[0]+'.txt'
          # Second coord [0] gets just the first character (label) and not /n too.
          label = x[1][0]

          # Now move the file to the right folder.          
          if os.path.exists(self.source_test_dir+'/en/'+fNameXml):
            os.rename(self.source_test_dir+'/en/'+fNameXml, self.test_dir+'/'+label+'/'+fNameTxt )

          # use readline() to read next line
          line = f.readline()

    def generate_keras_ds(self, batch_size):

      # Generate full randomized sets.

      train_set = tf.keras.preprocessing.text_dataset_from_directory(
          self.train_dir, 
          batch_size=batch_size,
          shuffle=False
          )

      test_set = tf.keras.preprocessing.text_dataset_from_directory(
          self.test_dir, 
          batch_size=batch_size,
          shuffle=False
          )

      self.train_set=train_set.shuffle(len(train_set),seed=1, reshuffle_each_iteration=False)
      self.test_set=test_set.shuffle(len(test_set),seed=1, reshuffle_each_iteration=False)

    def build_ds(self,batch_size):
      self.fetch_ds_files()
      self.organize_ds_folders()
      self.organize_ds_samples()
      self.generate_keras_ds(batch_size)